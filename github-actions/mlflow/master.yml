name: MLflow tests

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.6
      uses: actions/setup-python@v1
      with:
        python-version: 3.6
    - name: Install dependencies
      env:
        INSTALL_LARGE_PYTHON_DEPS: true
        INSTALL_SMALL_PYTHON_DEPS: true
      run: |
        source ./travis/install-common-deps.sh
        pip install -r ./travis/lint-requirements.txt
    - name: Run tests
      run: |
        export PATH="$HOME/miniconda/bin:$PATH"
        source activate test-environment
        ./lint.sh
  r:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - uses: r-lib/actions/setup-r@v1
    # This step dumps the current set of R dependencies and R version into files to be used
    # as a cache key when caching/restoring R dependencies.
    - name: Query dependencies
      run: |
        install.packages('remotes')
        saveRDS(remotes::dev_package_deps("mlflow/R/mlflow", dependencies = TRUE), ".github/depends.Rds", version = 2)
        writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
      shell: Rscript {0}

    - name: Cache R packages
      if: runner.os != 'Windows'
      uses: actions/cache@v2
      with:
        path: ${{ env.R_LIBS_USER }}
        # We cache R dependencies based on a tuple of the current OS, the R version, and the list of
        # R dependencies
        key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds') }}
        restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-
    - name: Install system dependencies
      run: |
        sudo apt-get install -y libcurl4-openssl-dev
    - name: Install dependencies
      run: |
        install.packages("devtools")
        remotes::install_deps('mlflow/R/mlflow', dependencies = TRUE, upgrade = FALSE)
      shell: Rscript {0}
    - name: Run tests
      run: |
        source ./travis/install-common-deps.sh
        export PATH="$HOME/miniconda/bin:$PATH"
        source activate test-environment
        cd mlflow/R/mlflow
        R CMD build .
        export LINTR_COMMENT_BOT=false
        cd tests
        Rscript ../.travis.R
    - name: Calculate code coverage
      run: |
        export MLFLOW_HOME=$(pwd)
        cd mlflow/R/mlflow/tests
        Rscript -e 'covr::codecov()'
      env:
        COVR_RUNNING: true
  python-small:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.6
      uses: actions/setup-python@v1
      with:
        python-version: 3.6
    - name: Install dependencies
      env:
        INSTALL_LARGE_PYTHON_DEPS: true
      run: |
        source ./travis/install-common-deps.sh
    - name: Run tests
      run: |
        export PATH="$HOME/miniconda/bin:$PATH"
        source activate test-environment
        ./travis/run-small-python-tests.sh

  java:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: 8
    - name: Install dependencies
      run: |
        source ./travis/install-common-deps.sh
    - name: Run tests
      run: |
        export PATH="$HOME/miniconda/bin:$PATH"
        source activate test-environment
        cd mlflow/java
        mvn clean package -q

  js:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: mlflow/server/js
    steps:
    - uses: actions/checkout@v2
    - name: Set up Node
      uses: actions/setup-node@v1
      with:
        node-version: 10.x
    - name: Install dependencies
      run: |
        npm i
    - name: Run lint
      run: |
        npm run lint
    - name: Run tests
      run: |
        npm run test

  protos:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Install dependencies
      run: |
        wget https://github.com/google/protobuf/releases/download/v3.6.0/protoc-3.6.0-linux-x86_64.zip -O $HOME/protoc.zip
        sudo unzip $HOME/protoc.zip -d /usr
    - name: Run tests
      run: |
        ./test-generate-protos.sh

  flavors:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.6
        uses: actions/setup-python@v1
        with:
          python-version: 3.6
      - name: Install dependencies
        env:
          INSTALL_LARGE_PYTHON_DEPS: true
          INSTALL_SMALL_PYTHON_DEPS: true
        run: |
          source ./travis/install-common-deps.sh
      - name: Run tests
        run: |
          export PATH="$HOME/miniconda/bin:$PATH"
          source activate test-environment
          ./travis/run-python-flavor-tests.sh;

  tensorflow:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.6
        uses: actions/setup-python@v1
        with:
          python-version: 3.6
      - name: Install dependencies
        env:
          INSTALL_LARGE_PYTHON_DEPS: true
          INSTALL_SMALL_PYTHON_DEPS: true
        run: |
          source ./travis/install-common-deps.sh
      - name: Run tests
        run: |
          export PATH="$HOME/miniconda/bin:$PATH"
          source activate test-environment
          ./travis/run-python-tf-tests.sh;

  sagemaker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.6
        uses: actions/setup-python@v1
        with:
          python-version: 3.6
      - name: Install dependencies
        env:
          INSTALL_LARGE_PYTHON_DEPS: true
          INSTALL_SMALL_PYTHON_DEPS: true
        run: |
          source ./travis/install-common-deps.sh
      - name: Run tests
        run: |
          export PATH="$HOME/miniconda/bin:$PATH"
          source activate test-environment
          ./travis/run-python-sagemaker-tests.sh;

  docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.6
        uses: actions/setup-python@v1
        with:
          python-version: 3.6
      - name: Set up Java
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - name: Install dependencies
        env:
          INSTALL_LARGE_PYTHON_DEPS: true
          INSTALL_SMALL_PYTHON_DEPS: true
        run: |
          source ./travis/install-common-deps.sh
          pip install sphinx==2.2.1 sphinx-click==2.3.1
      - name: Run tests
        run: |
          export PATH="$HOME/miniconda/bin:$PATH"
          source activate test-environment
          cd docs
          make rsthtml SPHINXOPTS="-W --keep-going" # Interpret Sphinx warnings as errors via the `-W` flag
          make javadocs
