name: Test package build

on:
  push:
    branches:
      - master
      - branch-[0-9]+.[0-9]+
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash --noprofile --norc -exo pipefail {0}

jobs:
  build:
    if: github.event_name != 'pull_request' || github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      actions: write # deleteArtifact
    strategy:
      matrix:
        type: ["full", "skinny"]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: ./.github/actions/untracked
      - uses: ./.github/actions/setup-python
      - name: Set environment variable for skinny client build
        if: ${{ matrix.type == 'skinny' }}
        run: |
          cat pyproject.skinny.toml > pyproject.toml
          cat README.rst >> README_SKINNY.rst
          cat README_SKINNY.rst > README.rst

      - name: Create dummy MLflow UI
        run: |
          mkdir -p mlflow/server/js/build
          echo '
          <!DOCTYPE html>
          <html lang="en">
            <head>
              <meta charset="utf-8">
              <title>MLflow</title>
            </head>
          <body>
            MLflow
          </body>
          </html>
          ' > mlflow/server/js/build/index.html

      - name: Check dependencies consistency
        run: |
          pip install pyyaml
          ./dev/validate-requirements-consistency.sh

      - name: Install dependencies
        run: |
          pip install build twine

      - name: Build distribution files
        id: build-dist
        run: |
          # Build distribution files
          python -m build .

          # List distribution files and check their file sizes
          ls -lh dist

          # Set step outputs
          sdist_path=$(find dist -type f -name "*.tar.gz")
          wheel_path=$(find dist -type f -name "*.whl")
          wheel_name=$(basename $wheel_path)
          wheel_size=$(stat -c %s $wheel_path)
          echo "sdist-path=${sdist_path}" >> $GITHUB_OUTPUT
          echo "wheel-path=${wheel_path}" >> $GITHUB_OUTPUT
          echo "wheel-name=${wheel_name}" >> $GITHUB_OUTPUT
          echo "wheel-size=${wheel_size}" >> $GITHUB_OUTPUT

      - name: List files
        run: |
          echo "::group::sdist"
          tar -tf ${{ steps.build-dist.outputs.sdist-path }}
          echo "::endgroup::"
          echo "::group::wheel"
          unzip -l ${{ steps.build-dist.outputs.wheel-path }}
          echo "::endgroup::"

      - name: Run twine check
        run: |
          twine check --strict ${{ steps.build-dist.outputs.wheel-path }}

      - name: Test installation from tarball
        run: |
          pip install ${{ steps.build-dist.outputs.sdist-path }}
          python -c "import mlflow; print(mlflow.__version__)"

      - name: Test installation from wheel
        run: |
          pip install --force-reinstall ${{ steps.build-dist.outputs.wheel-path }}
          python -c "import mlflow; print(mlflow.__version__)"

      # Anyone with read access can download the uploaded wheel on GitHub.
      - name: Store wheel
        uses: actions/upload-artifact@v4
        if: github.event_name == 'push'
        with:
          name: ${{ steps.build-dist.outputs.wheel-name }}
          path: ${{ steps.build-dist.outputs.wheel-path }}

      - name: Remove old wheels
        uses: actions/github-script@v7
        if: github.event_name == 'push'
        env:
          WHEEL_SIZE: ${{ steps.build-dist.outputs.wheel-size }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;

            // For some reason, the newly-uploaded wheel in the previous step is not included.
            const artifactsResp = await github.rest.actions.listArtifactsForRepo({
              owner,
              repo,
            });
            const wheels = artifactsResp.data.artifacts.filter(({ name }) => name.endsWith(".whl"));

            // The storage usage limit for a free github account is up to 500 MB. See the page below for details:
            // https://docs.github.com/en/github/setting-up-and-managing-billing-and-payments-on-github/about-billing-for-github-actions
            MAX_SIZE_IN_BYTES = 300_000_000; // 300 MB

            let index = 0;
            let sum = parseInt(process.env.WHEEL_SIZE);  // include the newly-uploaded wheel
            for (const [idx, { size_in_bytes }] of wheels.entries()) {
              index = idx;
              sum += size_in_bytes;
              if (sum > MAX_SIZE_IN_BYTES) {
                break;
              }
            }

            if (sum <= MAX_SIZE_IN_BYTES) {
              return;
            }

            // Delete old wheels
            const promises = wheels.slice(index).map(({ id: artifact_id }) =>
              github.rest.actions.deleteArtifact({
                owner,
                repo,
                artifact_id,
              })
            );
            Promise.all(promises).then(data => console.log(data));
