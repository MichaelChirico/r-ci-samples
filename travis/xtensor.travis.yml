language: cpp
dist: xenial
env:
matrix:
  fast_finish: true
  include:
    - os: linux
      if: branch = master
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-4.9
      env: COMPILER=gcc GCC=4.9 CHECK_CYCLIC_INCLUDES=1
    - os: linux
      if: branch = coverity
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-7
      env: COMPILER=gcc GCC=7 COVERITY_SCAN=1
    - os: linux
      if: branch = master
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-5
      env: COMPILER=gcc GCC=5 DISABLE_XSIMD=1
    - os: linux
      if: branch = master
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-6
      env: COMPILER=gcc GCC=6 DISABLE_EXCEPTION=1
    - os: linux
      if: branch = master
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-6
      env: COMPILER=gcc GCC=6 BOUND_CHECKS=1 BUILD_BENCHMARK=1
    - os: linux
      if: branch = master
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-6
      env: COMPILER=gcc GCC=6 COLUMN_MAJOR_LAYOUT=1
    - os: linux
      if: branch = master
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-7
      env: COMPILER=gcc GCC=7
    - os: linux
      if: branch = master
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-7
      env: COMPILER=gcc GCC=7 ENABLE_TBB=1
    - os: linux
      if: branch = master
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-7
      env: COMPILER=gcc GCC=7 ENABLE_OPENMP=1
    - os: linux
      if: branch = master
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-7
      env: COMPILER=gcc GCC=7 ENABLE_CPP17=1
    - os: linux
      if: branch = master
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-xenial-4.0
          packages:
            - g++-4.9
            - clang-4.0
      env: COMPILER=clang CLANG=4.0 
    - os: linux
      if: branch = master
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-xenial-5.0
          packages:
            - g++-4.9
            - clang-5.0
      env: COMPILER=clang CLANG=5.0 ENABLE_TBB=1 DISABLE_XSIMD=1
    - os: linux
      if: branch = master
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-xenial-5.0
          packages:
            - g++-4.9
            - clang-5.0
      env: COMPILER=clang CLANG=5.0 ENABLE_OPENMP=1 DISABLE_XSIMD=1
    - os: linux
      if: branch = master
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-xenial-6.0
          packages:
            - clang-6.0
      env: COMPILER=clang CLANG=6.0
    - os: osx
      if: branch = master
      osx_image: xcode8
      compiler: clang
env:
  global:
    - MINCONDA_VERSION="latest"
    - MINCONDA_LINUX="Linux-x86_64"
    - MINCONDA_OSX="MacOSX-x86_64"
before_install:
    - |
      # Configure build variables
      if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
        if [[ "$COMPILER" == "gcc" ]]; then
          export CXX=g++-$GCC CC=gcc-$GCC;
        fi
        if [[ "$COMPILER" == "clang" ]]; then
          export CXX=clang++-$CLANG CC=clang-$CLANG;
        fi
      elif [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
        export CXX=clang++ CC=clang;
      fi
install:
    # Define the version of miniconda to download
    - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
        MINCONDA_OS=$MINCONDA_LINUX;
      elif [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
        MINCONDA_OS=$MINCONDA_OSX;
      fi
    - wget "http://repo.continuum.io/miniconda/Miniconda3-$MINCONDA_VERSION-$MINCONDA_OS.sh" -O miniconda.sh;
    - bash miniconda.sh -b -p $HOME/miniconda
    - export PATH="$HOME/miniconda/bin:$PATH"
    - hash -r
    - conda config --set always_yes yes --set changeps1 no
    - conda update -q conda
    - conda install cmake -c conda-forge
    - conda install xtl==0.6.9 xsimd==7.4.4 nlohmann_json -c conda-forge
    - |
      if [[ "$CHECK_CYCLIC_INCLUDES"  == 1 ]]; then
        set -e
        conda install networkx -c conda-forge
        cd tools
        chmod +x check_circular.py
        ./check_circular.py
        cd ..
        set +e
      fi
    - if [[ "$ENABLE_TBB" == 1 ]]; then
        conda install tbb-devel -c conda-forge;
      fi
    # download & install coverity tool
    - |
      if [[ "$COVERITY_SCAN" == 1 ]]; then
        wget https://scan.coverity.com/download/linux64 --post-data "token=dhiOJUHtbFzXmULLZQCwiQ&project=xTensor" -O coverity_tool.tgz
        tar xaf coverity_tool.tgz
        rm coverity_tool.tgz
        mv cov-analysis-linux64-* cov-analysis-linux64
        export PATH="${PATH}:${PWD}/cov-analysis-linux64/bin"
        if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
          if [[ "$COMPILER" == "gcc" ]]; then
            cov-configure --template --comptype gcc --compiler g++-$GCC
          fi
        fi
      fi
    # Testing
    - mkdir build
    - cd build
    - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
        cat /proc/cpuinfo;
        ldd --version;
      fi
    - if [[ "$BOUND_CHECKS" == 1 ]]; then
        cmake -DXTENSOR_ENABLE_ASSERT=ON -DDOWNLOAD_GTEST=ON -DBUILD_BENCHMARK=ON ..;
      elif [[ "$COLUMN_MAJOR_LAYOUT" == 1 ]]; then
        cmake -DDOWNLOAD_GTEST=ON -DDEFAULT_COLUMN_MAJOR=ON ..;
      elif [[ "$DISABLE_XSIMD" == 1 ]]; then
        cmake -DDOWNLOAD_GTEST=ON ..;
      elif [[ "$ENABLE_TBB" == 1 ]]; then
        cmake -DDOWNLOAD_GTEST=ON -DXTENSOR_USE_XSIMD=ON -DXTENSOR_USE_TBB=ON -DTBB_INCLUDE_DIR=/home/travis/miniconda/include -DTBB_LIBRARY=/home/travis/miniconda/lib ..;
      elif [[ "$ENABLE_OPENMP" == 1 ]]; then
        cmake -DDOWNLOAD_GTEST=ON -DXTENSOR_USE_XSIMD=ON -DXTENSOR_USE_OPENMP=ON ..;
      elif [[ "$ENABLE_CPP17" == 1 ]]; then
        cmake -DDOWNLOAD_GTEST=ON -DXTENSOR_USE_XSIMD=ON -DCPP17=ON ..;
      elif [[ "$DISABLE_EXCEPTION" == 1 ]]; then
        cmake -DDOWNLOAD_GTEST=ON -DXTENSOR_DISABLE_EXCEPTIONS=ON ..;
      else
        cmake -DXTENSOR_USE_XSIMD=ON -DDOWNLOAD_GTEST=ON ..;
      fi

    # build & prepare tarball with coverity scanner
    - |
      if [[ "$COVERITY_SCAN" == 1 ]]; then
        cov-build --dir cov-int make -j2 test_xtensor_core_lib
        tar czvf cov-int.tgz cov-int
        curl --form token=dhiOJUHtbFzXmULLZQCwiQ \
             --form email=jaeho.kim@siemens-healthineers.com \
             --form file=@cov-int.tgz \
             --form version="CoverityBranch" \
             --form description="Automatic Coverity Scan build from Coverity branch" \
             https://scan.coverity.com/builds?project=xTensor
      fi
      make -j2 test_xtensor_lib

    - if [[ "$BUILD_BENCHMARK" == 1 ]]; then
        make -j2 benchmark_xtensor ;
      fi
    - cd test
script:
    - ./test_xtensor_lib
    
